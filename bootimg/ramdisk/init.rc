import /init.recovery.${ro.hardware}.rc

on early-init
    # Set the security context of /postinstall if present.
    restorecon /postinstall

    start ueventd
    # ONEPLUS_RECOVERY begin
    mount debugfs debugfs /sys/kernel/debug
    chmod 0755 /sys/kernel/debug
    # ONEPLUS_RECOVERY end

on init
    export PATH /sbin:/system/bin
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard
    export LD_LIBRARY_PATH .:/sbin

    symlink /system/bin /bin
    symlink /system/etc /etc

    mount cgroup none /acct cpuacct
    mkdir /acct/uid

    mkdir /sdcard
    mkdir /system
    mkdir /data
    mkdir /config
    mkdir /cache
    # ONEPLUS_RECOVERY begin
    mkdir /op2
    mkdir /firmware
    # ONEPLUS_RECOVERY end
    mkdir /sideload
    mount tmpfs tmpfs /tmp

    chown root shell /tmp
    chmod 0775 /tmp

    write /proc/sys/kernel/panic_on_oops 1
    write /proc/sys/vm/max_map_count 1000000

on property:ro.boot.configfs=*
   #Set up configfs
   mount configfs none /config
   mkdir /config/usb_gadget/g1 0770 shell shell
   mkdir /config/usb_gadget/g1/strings/0x409 0770 shell shell
   write /config/usb_gadget/g1/bcdUSB 0x0200
   write /config/usb_gadget/g1/os_desc/use 1
   write /config/usb_gadget/g1/strings/0x409/serialnumber ${ro.serialno}
   write /config/usb_gadget/g1/strings/0x409/manufacturer ${ro.product.manufacturer}
   write /config/usb_gadget/g1/strings/0x409/product ${ro.product.model}
   mkdir /config/usb_gadget/g1/functions/ffs.adb
   mkdir /config/usb_gadget/g1/configs/b.1 0770 shell shell
   mkdir /config/usb_gadget/g1/configs/b.1/strings/0x409 0770 shell shell
   write /config/usb_gadget/g1/os_desc/b_vendor_code 0x1
   write /config/usb_gadget/g1/os_desc/qw_sign "MSFT100"
   symlink /config/usb_gadget/g1/configs/b.1 /config/usb_gadget/g1/os_desc/b.1
   mount functionfs adb /dev/usb-ffs/adb uid=2000,gid=2000

on fs
    mkdir /dev/usb-ffs 0770 shell shell
    mkdir /dev/usb-ffs/adb 0770 shell shell

    # Set up sysfs entries for usb(used if configfs is not present)

    #write /sys/class/android_usb/android0/enable 0
    #write /sys/class/android_usb/android0/idVendor 18D1
    #write /sys/class/android_usb/android0/idProduct D001
    #write /sys/class/android_usb/android0/f_ffs/aliases adb
    #write /sys/class/android_usb/android0/functions adb
    #write /sys/class/android_usb/android0/iManufacturer ${ro.product.manufacturer}
    #write /sys/class/android_usb/android0/iProduct ${ro.product.model}
    #write /sys/class/android_usb/android0/iSerial ${ro.serialno}

    mount configfs none /config
    mkdir /config/usb_gadget/g1 0770 shell shell
    mkdir /config/usb_gadget/g1/strings/0x409 0770 shell shell
    write /config/usb_gadget/g1/bcdUSB 0x0200
    write /config/usb_gadget/g1/os_desc/use 1
    write /config/usb_gadget/g1/strings/0x409/serialnumber ${ro.serialno}
    write /config/usb_gadget/g1/strings/0x409/manufacturer ${ro.product.manufacturer}
    write /config/usb_gadget/g1/strings/0x409/product ${ro.product.model}
    mkdir /config/usb_gadget/g1/functions/ffs.adb
    mkdir /config/usb_gadget/g1/configs/b.1 0770 shell shell
    mkdir /config/usb_gadget/g1/configs/b.1/strings/0x409 0770 shell shell
    write /config/usb_gadget/g1/os_desc/b_vendor_code 0x1
    write /config/usb_gadget/g1/os_desc/qw_sign "MSFT100"
    symlink /config/usb_gadget/g1/configs/b.1 /config/usb_gadget/g1/os_desc/b.1

    mount functionfs adb /dev/usb-ffs/adb uid=2000,gid=2000

    mount ext4 /dev/block/bootdevice/by-name/op2 /op2 noatime nosuid nodev barrier=1

on boot
    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

# Load properties from /system/ + /factory after fs mount.
on load_system_props_action
    load_system_props

on firmware_mounts_complete
   rm /dev/.booting

# Mount filesystems and start core system services.
on late-init
    trigger early-fs
    trigger fs
    trigger post-fs
    trigger post-fs-data

    # Load properties from /system/ + /factory after fs mount. Place
    # this in another action so that the load will be scheduled after the prior
    # issued fs triggers have completed.
    trigger load_system_props_action

    # Remove a file to wake up anything waiting for firmware
    trigger firmware_mounts_complete

    trigger early-boot
    trigger boot

service ueventd /sbin/ueventd
    critical
    seclabel u:r:ueventd:s0

service charger /charger -r
    critical
    seclabel u:r:charger:s0

# ONEPLUS_RECOVERY begin
service hwservicemanager /system/bin/hwservicemanager
    disabled
    seclabel u:r:recovery:s0


service keymaster-3-0 /vendor/bin/hw/android.hardware.keymaster@3.0-service-qti
    disabled
    seclabel u:r:recovery:s0

service keymaster-4-0 /vendor/bin/hw/android.hardware.keymaster@4.0-service-qti
    disabled
    seclabel u:r:recovery:s0

service gatekeeper-1-0 /vendor/bin/hw/android.hardware.gatekeeper@1.0-service-qti
    disabled
    seclabel u:r:recovery:s0

service qseecomd /sbin/qseecomd
    disabled
    seclabel u:r:recovery:s0

service gatekeeperd /system/bin/gatekeeperd /data/misc/gatekeeper
    disabled
    seclabel u:r:recovery:s0

#danny.xiao@system, 2019/03/26, added for GCEB-2269
service vendor.qti.vibrator-1-2 /vendor/bin/hw/vendor.qti.hardware.vibrator@1.2-service
    disabled
    seclabel u:r:recovery:s0

# ONEPLUS_RECOVERY end

service recovery /sbin/recovery
    seclabel u:r:recovery:s0

service adbd /sbin/adbd --root_seclabel=u:r:su:s0 --device_banner=recovery
    disabled
    socket adbd stream 660 system system
    seclabel u:r:adbd:s0


# Always start adbd on userdebug and eng builds
on property:ro.debuggable=1
    write /sys/class/android_usb/android0/enable 1
    start adbd


on property:ro.boot.usbcontroller=*
    setprop sys.usb.controller ${ro.boot.usbcontroller}

# ONEPLUS_RECOVERY begin
# Preparing service for decrypting data
on property:debug.symlink.vendor=1
    start hwservicemanager
    start gatekeeper-1-0
    start qseecomd
# ONEPLUS_RECOVERY end

# Restart adbd so it can run as root
on property:service.adb.root=1
    write /sys/class/android_usb/android0/enable 0
    write /config/usb_gadget/g1/UDC "none"
    restart adbd

on property:sys.usb.ffs.ready=1
    rm /config/usb_gadget/g1/configs/b.1/f1
    rm /config/usb_gadget/g1/configs/b.1/f2
    rm /config/usb_gadget/g1/configs/b.1/f3
    rm /config/usb_gadget/g1/configs/b.1/f4
    rm /config/usb_gadget/g1/configs/b.1/f5
    write /config/usb_gadget/g1/configs/b.1/strings/0x409/configuration "adb"
    write /config/usb_gadget/g1/idVendor 0x18d1
    write /config/usb_gadget/g1/idProduct 0xd001
    write /config/usb_gadget/g1/strings/0x409/product "OnePlus"
    symlink /config/usb_gadget/g1/functions/ffs.adb /config/usb_gadget/g1/configs/b.1/f1
    write /sys/class/android_usb/android0/enable 1
    write /config/usb_gadget/g1/UDC ${sys.usb.controller}
